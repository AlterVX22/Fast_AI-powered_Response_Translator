import openai
import os
import logging
from typing import Optional
import random

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = os.getenv("OPENROUTER_API_KEY")

DEFAULT_MODEL = "mistralai/mistral-7b-instruct:free"

# –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–∞—Ä (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ handlers.py)
CANCELLATION_REASONS = [
    "–†–æ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ((",
    "–†–µ–±—è—Ç–∞, —è –∑–∞–±–æ–ª–µ–ª, –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç :(",
    "–ê —á—Ç–æ–±—ã —Ö–æ—Ä–æ—à–æ —Ç—Ä—É–¥–∏—Ç—å—Å—è, –Ω–∞–¥–æ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥—ã—Ö–∞—Ç—å!",
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞–µ–º :)",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –æ—Ç–¥—ã—Ö–∞–µ–º!",
    "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–¥–∑–∞—â–∏—Ç—ã —É 6 –∫—É—Ä—Å–∞, –ø–∞—Ä—ã –Ω–µ –±—É–¥–µ—Ç.",
    "–ù–µ—Ç, –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ.",
    "–ù–µ—Ç –ø–∞—Ä—ã –Ω–∞—á–Ω—É—Ç—Å—è –Ω–µ —Ä–∞–Ω–µ–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏.",
    "–°–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è!",
    "–†–µ–±—è—Ç–∞, –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ú–∞—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ä–µ–¥–∞–º –Ω–µ –±—É–¥–µ—Ç.",
    "–£–≤–∞–∂–∞–µ–º—ã–µ —Ä–µ–±—è—Ç–∞! –ó–∞–≤—Ç—Ä–∞ –≤ 17:00 –±—É–¥–µ—Ç –ø–∞—Ä–∞! (—à—É—Ç–∫–∞)",
    "–í —Å—É–±–±–æ—Ç—É –±—É–¥–µ—Ç üòÖ"
]

def generate_itmo_response():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ò–¢–ú–û-–æ—Ç–≤–µ—Ç–∞"""
    # –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω
    reason = random.choice(CANCELLATION_REASONS)
    response1 = {
        "title": "üéì –ù–∞—à–∞ –í—Å–µ–ª–µ–Ω–Ω–∞—è",
        "text": f"‚ö†Ô∏è –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n{reason}\n\n–°–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ —É–∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ç–æ—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º! üòä"
    }
    
    # –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò
    try:
        response = openai.ChatCompletion.create(
            model=DEFAULT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã –∏–º–∏—Ç–∏—Ä—É–µ—à—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ò–¢–ú–û, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ–Ω—è–µ—Ç –ø–∞—Ä—ã."},
                {"role": "user", "content": f"–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Ç–∫—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø–∞—Ä –Ω–µ–º–Ω–æ–≥–æ –∞–±—Å—É—Ä–¥–Ω—É—é, –ø–æ—Ö–æ–∂—É—é –Ω–∞ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã: {', '.join(CANCELLATION_REASONS)}. –¢–æ–ª—å–∫–æ —Å–∞–º—É –ø—Ä–∏—á–∏–Ω—É, –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π."}
            ],
            headers={
                "HTTP-Referer": "http://localhost:8000",
                "X-Title": "ITMO Bot"
            },
            temperature=0.7
        )
        ai_reason = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI Error: {e}")
        ai_reason = "–†–µ–±—è—Ç–∞, —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫... –Ω—É –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ üòÖ"
    
    response2 = {
        "title": "üéì –û –º—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–æ–π –º–∞–ª–æ —á—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ...",
        "text": f"‚ö†Ô∏è –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n{ai_reason}\n\n–°–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ —É–∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ç–æ—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º! üòä"
    }
    
    return [response1, response2]

def translate_text_with_llm(text: str, target_lang: str, source_lang: str = "auto", model: Optional[str] = None) -> str:
    if not text.strip():
        return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    
    model = model or DEFAULT_MODEL
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥:\n\n{text}"

    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫."},
                {"role": "user", "content": prompt}
            ],
            headers={
                "HTTP-Referer": "http://localhost:8000",
                "X-Title": "Translation Bot"
            },
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenRouter Error: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"