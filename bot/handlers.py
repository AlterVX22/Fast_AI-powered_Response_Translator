from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
import requests
import os
from dotenv import load_dotenv
import random
import openai

load_dotenv()
BACKEND_URL = os.getenv("BACKEND_URL")
DEFAULT_MODEL = "mistralai/mistral-7b-instruct:free"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
(
    STATE_SELECT_INPUT_LANG,
    STATE_SELECT_OUTPUT_LANG,
    STATE_ENTER_TEXT
) = range(3)

LANGUAGES = {
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "English",
    "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "French",
    "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π": "German",
    "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π": "Spanish",
    "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π": "Chinese"
}

# –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–∞—Ä
CANCELLATION_REASONS = [
    "–†–æ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É ((",
    "–†–µ–±—è—Ç–∞, —è –∑–∞–±–æ–ª–µ–ª, –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –±—É–¥–µ—Ç :(",
    "–ê —á—Ç–æ–±—ã —Ö–æ—Ä–æ—à–æ —Ç—Ä—É–¥–∏—Ç—å—Å—è, –Ω–∞–¥–æ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥—ã—Ö–∞—Ç—å!",
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞–µ–º :)",
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –æ—Ç–¥—ã—Ö–∞–µ–º!",
    "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–¥–∑–∞—â–∏—Ç—ã —É 6 –∫—É—Ä—Å–∞, –ø–∞—Ä—ã –Ω–µ –±—É–¥–µ—Ç.",
    "–ù–µ—Ç, –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ.",
    "–ù–µ—Ç –ø–∞—Ä—ã –Ω–∞—á–Ω—É—Ç—Å—è –Ω–µ —Ä–∞–Ω–µ–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏.",
    "–°–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è!",
    "–†–µ–±—è—Ç–∞, –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ú–∞—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å—Ä–µ–¥–∞–º –Ω–µ –±—É–¥–µ—Ç.",
    "–£–≤–∞–∂–∞–µ–º—ã–µ —Ä–µ–±—è—Ç–∞! –ó–∞–≤—Ç—Ä–∞ –≤ 17:00 –±—É–¥–µ—Ç –ø–∞—Ä–∞! (—à—É—Ç–∫–∞)",
    "–í —Å—É–±–±–æ—Ç—É –±—É–¥–µ—Ç üòÖ"
]

start_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üî§ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton("üè´ –ò–¢–ú–û")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def delete_message_with_animation(context, chat_id, message_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (—ç—Ñ—Ñ–µ–∫—Ç –¢–∞–Ω–æ—Å–∞)"""
    try:
        await context.bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ù–∞–∂–º–∏ \"üî§ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=start_buttons
    )
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üî§ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫\n"
        "üè´ –ò–¢–ú–û - —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∑–≤—É—á–∏—Ç –ò–¢–ú–û\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=start_buttons
    )
    return ConversationHandler.END


async def itmo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton("–û—Å—Ç–∞–≤—å –Ω–∞–¥–µ–∂–¥—É, –≤—Å—è–∫ —Å—é–¥–∞ –≤—Ö–æ–¥—è—â–∏–π", callback_data="output_itmo")]]
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –ø–æ—á–µ–º—É —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç –ø–∞—Ä:",
        reply_markup=reply_markup
    )
    return STATE_SELECT_OUTPUT_LANG

async def handle_itmo_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üî§ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥":
        buttons = [[InlineKeyboardButton(lang, callback_data=f"output_{code}")] 
                  for lang, code in LANGUAGES.items()]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_markup)
        return STATE_SELECT_OUTPUT_LANG

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)

    elif text == "üè´ –ò–¢–ú–û":
        return await itmo_command(update, context)

    elif context.user_data.get("expecting_text", False):
        context.user_data["expecting_text"] = False
        target_lang = context.user_data.get("target_lang")
        
        translation = request_translation(text, target_lang)
        await update.message.reply_text(
            f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}:\n{translation}",
            reply_markup=start_buttons
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=start_buttons
    )
    return ConversationHandler.END


async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("output_"):
        lang_code = query.data.split("_")[1]
        
        if lang_code == "itmo":
            await delete_message_with_animation(context, query.message.chat_id, query.message.message_id)
            
            try:
                response = requests.get(f"{BACKEND_URL}/itmo-translate", timeout=20)
                if response.status_code == 200:
                    data = response.json()
                    responses = data.get("responses", [])
                    
                    if len(responses) >= 2:
                        response_text = "\n\n".join(
                            f"{r['title']}:\n\n{r['text']}" for r in responses
                        )
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=response_text,
                            reply_markup=start_buttons
                        )
                    else:
                        raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            except Exception as e:
                #logger.error(f"ITMO translation error: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–¢–ú–û-–æ—Ç–≤–µ—Ç–æ–≤",
                    reply_markup=start_buttons
                )
        else:
            context.user_data["target_lang"] = lang_code
            context.user_data["expecting_text"] = True
            
            await delete_message_with_animation(context, query.message.chat_id, query.message.message_id)
            
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
        return ConversationHandler.END
    
    return ConversationHandler.END


def request_translation(text: str, target_lang: str) -> str:
    if not BACKEND_URL:
        return "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/translate",
            json={"text": text, "target_lang": target_lang},
            timeout=20
        )
        return response.json().get("result", "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞") if response.status_code == 200 else f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({response.status_code})"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"